{
  "openapi": "3.1.0",
  "info": {
    "title": "My API",
    "description": "This is a sample Spring Boot 3.5 API with Swagger",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost:9001",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "User Controller",
      "description": "User operations for blog management"
    },
    {
      "name": "Comments",
      "description": "APIs for managing blog post comments"
    },
    {
      "name": "Public",
      "description": "APIs for public operations"
    },
    {
      "name": "Admin",
      "description": "APIs for administrative operations"
    },
    {
      "name": "Blog Controller",
      "description": "APIs for managing blog posts"
    }
  ],
  "paths": {
    "/v1/api/user/users/{userId}": {
      "get": {
        "tags": [
          "User Controller"
        ],
        "summary": "Get user by ID",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Controller"
        ],
        "summary": "Update user info",
        "operationId": "updateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/api/blog/{id}": {
      "get": {
        "tags": [
          "Blog Controller"
        ],
        "summary": "Get blog by ID",
        "description": "Retrieves a specific blog post by its ID",
        "operationId": "getBlogById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the blog post to be retrieved",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved blog post",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogDTO"
                }
              }
            }
          },
          "404": {
            "description": "Blog post not found"
          }
        }
      },
      "put": {
        "tags": [
          "Blog Controller"
        ],
        "summary": "Update a blog post",
        "description": "Updates an existing blog post",
        "operationId": "updateBlog",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the blog post to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Updated blog post object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Blog post updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogDTO"
                }
              }
            }
          },
          "404": {
            "description": "Blog post not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Blog Controller"
        ],
        "summary": "Delete a blog post",
        "description": "Deletes a specific blog post by its ID",
        "operationId": "deleteBlog",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the blog post to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Blog post deleted successfully"
          },
          "404": {
            "description": "Blog post not found"
          }
        }
      }
    },
    "/api/comments/{id}": {
      "put": {
        "tags": [
          "Comments"
        ],
        "summary": "Update a comment",
        "description": "Updates an existing comment by ID. Only the comment owner or admin can update a comment.",
        "operationId": "updateComment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the comment to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Comment updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentDto"
                }
              }
            }
          },
          "404": {
            "description": "Comment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Comments"
        ],
        "summary": "Delete a comment",
        "description": "Deletes a comment by ID. Only the comment owner or admin can delete a comment.",
        "operationId": "deleteComment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the comment to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Comment deleted successfully"
          },
          "404": {
            "description": "Comment not found"
          }
        }
      }
    },
    "/v1/api/public/create-user": {
      "post": {
        "tags": [
          "Public"
        ],
        "summary": "Create user info",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/api/blog/create": {
      "post": {
        "tags": [
          "Blog Controller"
        ],
        "summary": "Create a new blog post",
        "description": "Creates a new blog post",
        "operationId": "createBlog",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Blog post created successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BlogDTO"
                }
              }
            }
          }
        }
      }
    },
    "/v1/api/admin/create-user": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Create user info",
        "operationId": "createUser_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/comments": {
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "Create a new comment",
        "description": "Creates a new comment on a blog post. Can be either a top-level comment or a reply to an existing comment.",
        "operationId": "createComment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Comment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/api/blog": {
      "get": {
        "tags": [
          "Blog Controller"
        ],
        "summary": "Get all blogs",
        "description": "Retrieves a list of all blog posts",
        "operationId": "getAllBlogs",
        "responses": {
          "200": {
            "description": "Successfully retrieved list of blogs",
            "content": {
              "application/json": {

              }
            }
          }
        }
      }
    },
    "/v1/api/admin/users": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get users with pagination",
        "description": "Retrieves a paginated list of users. Requires ADMIN role.",
        "operationId": "getUsersWithPagination",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (0-based)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved paginated users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid pagination parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingResultCreateUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingResultCreateUserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingResultCreateUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/api/admin/users/{id}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get user by ID",
        "description": "Retrieves a specific user by their ID. Requires ADMIN role.",
        "operationId": "getUserById_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to be retrieved",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/api/admin/users-without-page": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get all users without pagination",
        "description": "Retrieves a list of all users without pagination. Requires ADMIN role.",
        "operationId": "getAllUsers",
        "responses": {
          "200": {
            "description": "Successfully retrieved list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "$ref": "#/components/schemas/CreateUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateUserResponse"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient privileges",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateUserResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/comments/post/{postId}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get paginated comments for a post",
        "description": "Retrieves a paginated list of comments for a specific blog post.",
        "operationId": "getCommentsForPost",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "ID of the post to retrieve comments for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageable",
            "in": "query",
            "description": "Pagination and sorting parameters",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved comments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid post ID",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageCommentDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/comments/post/{postId}/tree": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get comment tree for a post",
        "description": "Retrieves all comments for a post in a hierarchical tree structure with replies nested under their parent comments.",
        "operationId": "getCommentTreeForPost",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "ID of the post to retrieve comment tree for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved comment tree",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/comments/post/{postId}/count": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get comment count for a post",
        "description": "Returns the total number of comments for a specific blog post.",
        "operationId": "getCommentCount",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "ID of the post to get comment count for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved comment count",
            "content": {
              "text/plain": {

              }
            }
          }
        }
      }
    },
    "/v1/api/admin/users/{userName}": {
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "Delete user by username",
        "description": "Deletes a user by their username. Requires ADMIN role.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Username of the user to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "john.doe"
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully deleted"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient privileges"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "age": {
            "type": "string"
          },
          "profileImage": {
            "type": "string"
          }
        }
      },
      "BlogDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        }
      },
      "CommentDto": {
        "type": "object",
        "description": "Data Transfer Object for Comment operations",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "type": "string",
            "description": "The content of the comment",
            "example": "This is a great post! Thanks for sharing."
          },
          "authorId": {
            "type": "string",
            "description": "ID of the comment author",
            "example": "auth0|1234567890"
          },
          "authorName": {
            "type": "string",
            "description": "Name of the comment author",
            "example": "John Doe"
          },
          "authorEmail": {
            "type": "string",
            "description": "Email of the comment author",
            "example": "john.doe@example.com"
          },
          "approved": {
            "type": "boolean",
            "description": "Whether the comment has been approved by a moderator",
            "example": false
          },
          "postId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the post this comment belongs to",
            "example": 123
          },
          "parentId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the parent comment if this is a reply",
            "example": 456
          },
          "replies": {
            "type": "array",
            "description": "List of replies to this comment",
            "items": {
              "$ref": "#/components/schemas/CommentDto"
            },
            "uniqueItems": true
          }
        },
        "required": [
          "authorId",
          "content",
          "postId"
        ]
      },
      "CreateUserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "minLength": 1
          },
          "firstName": {
            "type": "string",
            "minLength": 1
          },
          "lastName": {
            "type": "string"
          },
          "username": {
            "type": "string",
            "minLength": 1
          },
          "role": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "minLength": 1,
            "writeOnly": true
          },
          "age": {
            "type": "integer",
            "format": "int32",
            "maximum": 100,
            "minimum": 1
          },
          "profileImage": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "firstName",
          "password",
          "username"
        ]
      },
      "PagingResult": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {

            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "CreateUserResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "keycloakId": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "age": {
            "type": "string"
          },
          "profileImage": {
            "type": "string"
          }
        }
      },
      "PagingResultCreateUserResponse": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateUserResponse"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PageCommentDto": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommentDto"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "unpaged": {
            "type": "boolean"
          },
          "paged": {
            "type": "boolean"
          }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          },
          "unsorted": {
            "type": "boolean"
          },
          "sorted": {
            "type": "boolean"
          }
        }
      }
    }
  }
}